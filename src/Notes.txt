--------------------
GENERAL PROCESS

I was inspired by the NASA NEO API and Custom Visualizer website.
After right clicking and walking through the source code I realized they were using Plotly.
I then found that Plotly was in Python (primarily), so I searched for other libraries and 
    found that Plotly had a js version. 
I read the documentation and followed some online tutorials for Plotly. 
Once I got a simple graph (random data in 2d format) I determined from the source code that 
    A 3d trace was being used. 
I realized the format for the data needed was xyz pairs, so i walked through the calculations
    in the source to determine if I could figure out what was going on.
    unfortunately, everything was in single character variables and used mathmatical notations
I was able to determine which values (single chars) matched to the six input elements on the
    site.
I then watched a view videos on orbits in general and realized that these were the 6 parameters
    that define an orbit. 
However, the math involved in getting those parameters to function was foreign to me.
I fumbled around in the source code for a few hours until I made some progress by finding other
    sites that had traditional mathmatical explainations of orbits.
I was able to generate my first set of 6 equations that resulted in some basic ellipses from those.
However my data was obviously very far off so I tried to refine it further.
Eventually, after watching a lot of videos and following another blog post that had some Python
    examples I was able to find some pretty good formulas for the orbits (they were roughly
    the right size and shape).
From there i shifted gears and developed a working UI. 
I reworked my API calls twice until I landed on the current setup, where the first call pulls a date
    and the second pulls a single object's data upon selections.
I completed (time intensive) about 90% of the functional aspects of the UI and then revisited my 
    orbit formulas. 
Feeling frustrated after not making much more progress I reached out to the asteroid and astrodynamics
    subreddit for some advice.
There wasnt much activity on those pages and I couldn't find much in the way of an active astrodynamics
    forum elsewhere on the internet so I decided to find individuals and message them directly.
Seeing some individuals who had posted educated responses a few years ago I confirmed that they were 
    active somewhere on reddit in the last 2 months and reached out to 2 of them. 
One responded relatively quickly and helped walk me though a different approach for analytical orbit 
    calculations. 
That is currently (5/29/25) the method I am using for generating traces. However, when we got to point
    data he said that this method did not take time into account and so it would not be effective for
    generating date related point data. 
Despite hearing this I mentally thought through what was being done and realized that I could divide the
    current orbit by 360 to get the angle currently needed at a given time after periapsis. 
    Since I had accurate periapsis dates I used that as a basis to calculate some of the needed values.
My understanding of Trig is shabby at best but I believe I made significant progress towards accuracy
    in my point data. 
That being said my orbits are off from the orbit Visualizer that NASA has. However, since every date 
    I select that should have the earth and NEO near each other (like closest historical approach) seems
    to be accurate. Since my orbits are very close to their representation I am wondering if their point data
    is not as accurate as one might think. (That being said, I am confident that those working at NASA have
    a far greater understanding of orbits than I haha)
Currently I have burned out a bit, and am setting this project to the side to work on something else that will
    further my skills/resume.
I cleaned up the code and added a loading spinner and will now be setting this aside until I start apply for jobs.
I will likely add some more polish at that time.

This project was a great success and helped me to feel more confident with JS, data visualization, Trig/Math,
    React, UI development and state management.

---------------------------

'
Orbit Plot:
// Constants
  // const t = 2451545 * (24 * 60 * 60 * 1000); //January 1, 4713 BC ending on Jan 1 2000 at 12:00pm in seconds
  // const degToRad = Math.PI / 180;

   // const calcAdjMeanAnomaly = (
  //   Tx: number | undefined,
  //   orbDat?: Orbital_Data
  // ) => {
  //   if (orbDat && Tx) {
  //     const Mx = (2 * Math.PI * (Tx - t)) / (orbDat?.T * 24 * 60 * 60 * 1000);
  //     return Mx;
  //   }
  // };

  
  // const calcPerifocalPositionAtDate = (orbDat: Orbital_Data, date: number) => {
  //   const remainingOrbitArc =
  //     ((date - orbDat.date) / (24 * 60 * 60 * 1000)) % orbDat.T;
  //   console.log("remainingOrbArc: ", remainingOrbitArc);
  //   const rx =
  //     orbDat.a /
  //     (1 - orbDat.e * orbDat.e) /
  //     (1 + orbDat.e * Math.cos(((2 * Math.PI) / orbDat.T) * remainingOrbitArc));
  //   return [rx, remainingOrbitArc];
  // };

  
  // const calc2DxyEllipsePoint = (
  //   rx: number,
  //   remainingOrbArc: number = 1,
  //   orbDat: Orbital_Data
  // ) => {
  //   const x = rx * Math.cos(((2 * Math.PI) / orbDat.T) * remainingOrbArc);
  //   const y = rx * Math.sin(((2 * Math.PI) / orbDat.T) * remainingOrbArc);
  //   return [x, y];
  // };

    // const XYZNewPointCalc = (date: number, orbDat?: Orbital_Data) => {
  //   if (orbDat) {
  //     const rxAndRadRemainingArr = calcPerifocalPositionAtDate(orbDat, date);
  //     const ellipsePoint2d = calc2DxyEllipsePoint(
  //       rxAndRadRemainingArr[0],
  //       rxAndRadRemainingArr[1],
  //       orbDat
  //     );
  //     const coordinatePoint = calc3DEllipseFrom2D(ellipsePoint2d, orbDat);
  //     if (coordinatePoint) {
  //       return {
  //         x: coordinatePoint[0],
  //         y: coordinatePoint[1],
  //         z: coordinatePoint[2]
  //       };
  //     }
  //   }
  // };

  
  //Calculation of derived values
  // const getAdjustedT2 = (value: string, change: number, date: number) => {
  //   const secondsSinceJ200 = date - t;
  //   switch (value) {
  //     case "day":
  //       const timeChange = change * 24 * 60 * 60 * 1000;
  //       return secondsSinceJ200 + timeChange;
  //       break;
  //     default:
  //       break;
  //   }
  // };

  // const calcTrueAnomaly2 = (Mx: number | undefined, orbDat?: Orbital_Data) => {
  //   if (Mx && orbDat) {
  //     Mx = Mx * degToRad;
  //     const e = Number(orbDat.e);
  //     const i1 = 2 * e - e ** (3 / 4) * Math.sin(Mx);
  //     const i2 = (5 / 4) * e ** 2 * Math.sin(2 * Mx);
  //     const i3 = (13 / 12) * e ** 3 * Math.sin(3 * Mx);
  //     const i4 = (103 / 96) * e ** 4 * Math.sin(4 * Mx);
  //     const i5 = (1097 / 960) * e ** 5 * Math.sin(5 * Mx);
  //     const v = Mx + (180 / Math.PI) * (i1 + i2 + i3 + i4 + i5);
  //     return v; //Value in degrees
  //   }
  // };
  // const calcMeanDistance = (orbDat?: Orbital_Data) => {
  //   if (orbDat) {
  //     const aX = orbDat.a / (1 - orbDat.e);
  //     return aX; //Value is in A.U.   //NOT SURE IF THIS WORKS
  //   }
  // };

  // const calcHelioDist = (
  //   ax: number | undefined,
  //   v: number | undefined,
  //   orbDat?: Orbital_Data
  // ) => {
  //   if (ax && v && orbDat) {
  //     const r = (ax * (1 - orbDat.e ** 2)) / (1 + orbDat.e * Math.cos(v)); //Currently dont have Ex updated to use ax
  //     return r; //Value is in A.U.
  //   }
  // };
  // const calcXYZ = (
  //   //Calculates the rectangular coordinates from angular coordinates
  //   r: number | undefined,
  //   v: number | undefined,
  //   orbDat?: Orbital_Data
  // ) => {
  //   if (r && v && orbDat) {
  //     const o = Number(orbDat.o) * degToRad;
  //     const p = Number(orbDat.p) * degToRad;
  //     const i = Number(orbDat.i) * degToRad;
  //     const x =
  //       r *
  //       (Math.cos(o) * Math.cos(v + p - o) -
  //         Math.sin(o) * Math.sin(v + p - o) * Math.cos(i));
  //     const y =
  //       r *
  //       (Math.sin(o) * Math.cos(v + p - o) +
  //         Math.cos(o) * Math.sin(v + p - o) * Math.cos(i));
  //     const z = r * (Math.sin(v + p - o) * Math.sin(i));
  //     return [x, y, z]; //Value is in A.U.
  //   }
  // };

  //Coordinate Generation Functions
  // const XYZFromOrbData = (orbDat?: Orbital_Data) => {
  //   if (orbDat) {
  //     let x = [];
  //     let y = [];
  //     let z = [];
  //     for (let i = 0; i < orbDat.T + 10; i += 1) {
  //       const Tx = getAdjustedT2("day", i, orbDat.date);
  //       const Mx = calcAdjMeanAnomaly(Tx, orbDat);
  //       const v = calcTrueAnomaly(Mx, orbDat);
  //       const ax = calcMeanDistance(orbDat);
  //       const rx = calcHelioDist(ax, v, orbDat);
  //       const coordinatePoint = calcXYZ(rx, v, orbDat);
  //       if (coordinatePoint) {
  //         x.push(Number(coordinatePoint[0]));
  //         y.push(Number(coordinatePoint[1]));
  //         z.push(Number(coordinatePoint[2]));
  //       }
  //     }
  //     return { x: x, y: y, z: z };
  //   }
  // };

  // const XYZForSpecificDate = (date: number, orbDat: Orbital_Data) => {
  //   const Tx = Number(date);
  //   const Mx = calcAdjMeanAnomaly(Tx, orbDat);
  //   const v = calcTrueAnomaly(Mx, orbDat);
  //   const a = calcMeanDistance(orbDat);
  //   const r = calcHelioDist(a, v, orbDat);
  //   const coordinatePoint = calcXYZ(r, v, orbDat);
  //   return coordinatePoint;
  // };

  //   Coordinate Generation
  //   Traces
  // useEffect(() => {
  //   console.log("Trace Generating useEffect triggered: Top");
  //   //If API requests have resolved: calculate trace data and immutably update the OrbitingBody.orbit data.
  //   if (isLoaded1) {
  //     console.log("Trace Generating useEffect triggered: isLoaded1 loop");
  //     let copyOrbBodyArr = orbitingBodyArr?.slice();
  //     copyOrbBodyArr?.forEach((body) => {
  //       body.orbitalData.orbit = XYZFromOrbData(body?.orbitalData);
  //     });
  //     setOrbitingBodyArr(copyOrbBodyArr);
  //     console.log(copyOrbBodyArr[0]);
  //     //Update conditional rendering of the Plot
  //     setIsLoaded2(true);
  //   }
  // }, [isLoaded1]); //Dependent on API ID response completion

   // const NEOXYZ = XYZForSpecificDate(
      //   requestedOrbitTime,
      //   orbitingBodyArr[0].orbitalData
      // );
      // if (NEOXYZ) {
      //   setXYZNEO([[NEOXYZ[0]], [NEOXYZ[1]], [NEOXYZ[2]]]);
      // }



//============================================================//
//            NOTES USED TO FIGURE OUT THESE CALCS            //
//                                                            //
//============================================================//
/*TEMPORARY INTERFACE => ADDED NOTES I FOUND HELPFUL
// interface Orbital_Data {
//   type: string; // ecc == 0 => Circular, ecc < 1 => Elliptic, ecc == 1 => "Parabolic"m, ecc > 1 "hyperbolic"
//   i: number; // "inclination"
//   e: number; // "eccentricity"
//   o: number; // capital omega => "ascending_node_longitude"
//   p: number; // small omega => "perihelion_argument"
//   q: number; // "perihelion_distance"
//   Q: number; // "aphelion_distance"
//   P: number; // "orbital_period"
//   n: number; // "mean_motion"
//   t: number; // "epoch time => constant 946728000000" => 2451545
//   T: number; // "perihelion_time" => expressed in epoch time
//   dT: number; // "T-t" => time since Perihelion
//   M: number; // "mean anomaly" => 0 at perihelion and 180 at aphelion
//   L: number; // Mean Longitude => M + w + N
//   E: number; // Eccentric anomaly: M = E - e * sin(E)
//   v: number; // True anomaly: angle from perihelion to the planet as from the sun => 2 * atan(w)   =>
//   // v = m + (2 * e - 0.25 *pow(e,3) + 5/96 * pow(e,5)) * sin(m) +
//   //(1.25 * pow(e,2) - 11/24 * pow(e,4)) * sin(2*m) +
//   //(13/12 * pow(e,3) - 43/64 * pow(e,5)) * sin(3*m) +
//   //103/96 * pow(e,4) * sin(4*m) + 1097/960 * pow(e,5) * sin(5*m);  =>
//   // M = 232.910644 degrees or 4.065057601 radians
//   //  e = 0.093346v = 224.9688989 degrees  or 3.926448  radians
//   // Therefore, v = 224.9688989 degrees  or 3.926448  radians
//   r: number; // Heliocentric distance => planets distance to the sun =>  q * ( 1 + w*w )   =>  r = a * (1 - e^2) / [1 + e * cos(v)]
//   a: number; // Mean distance => (used for eliptical?) => a = q/(1-e)  <= 'Right ascension'
// }
*/
/*ORBITAL DATA API RESPONSE STRUCTURE
// "orbital_data": {
//     "orbit_id": "30",
//     "orbit_determination_date": "2023-08-23 05:49:41",
//     "first_observation_date": "2010-07-18",
//     "last_observation_date": "2023-08-22",
//     "data_arc_in_days": 4783,
//     "observations_used": 123,
//     "orbit_uncertainty": "0",
//     "minimum_orbit_intersection": ".0160379",
//     "jupiter_tisserand_invariant": "8.149",
//     "epoch_osculation": "2460800.5",  => 9255 since epoch
//   e  "eccentricity": ".6758435764026873",
//   a  "semi_major_axis": ".6820856911517545",
//   i  "inclination": "12.58725238186114",
// Omega "ascending_node_longitude": "306.5069351665489",
//     "orbital_period": "205.758049964439",
// p(a) of Sun = "perihelion_distance": ".2211024582306539",
// small omega  "perihelion_argument": "195.6453414534589",
// r(a) of Sun = "aphelion_distance": "1.143068924072855",
//   JD?  "perihelion_time": "2460889.401960145344",
//  M   "mean_anomaly": "204.4546609094758",
//  n   "mean_motion": "1.749627779142631",
//     "equinox": "J2000",
//     "orbit_class": {
//       "orbit_class_type": "ATE",
//       "orbit_class_description": "Near-Earth asteroid orbits similar to that of 2062 Aten",
//       "orbit_class_range": "a (semi-major axis) \u003C 1.0 AU; q (perihelion) \u003E 0.983 AU"
//     }
*/
/*DESCRIPTION OF ELEMENTS
// e = Eccentricty => "Pointiness" of the orbit
// a = Semi-major Axis => Half the maximum diameter of the elliptical orbit
// r(subscript a) = apoapsis => furthest point in the orbit
// = a(1+e)
// r(subscript p) = periapsis => closest point in the orbit
// = a(1-e)
// i = inclination => angle between the plane of the orbit and the reference plane
// 0-90deg normal direction orbit
// 90-180deg retrograde orbits
// Omega (greek symbol) = longitude of the ascending node
//Angle at the point where the orbit ascending passes through the horizontal plane of the earth and sun
//Measured in deg, measured counterclockwise
// omacron (green symbol looks like w) = Argument of periapsis
// The angle between the ascending node and the periapsis (lowest point of orbit)
// w with a slash above it = longitude of periapsis
//          w(slash) = Omega + omacron
// M = mean anomaly => imaginary angle that is zero at periapsis and increases at a constant rate of 360 per orbit
//        Normally measured at epoch or J2000
// n = mean motion => rate at which mean anomaly changes
// 2pie/T
//    For low inclination orbits: L = w(slash)+M
// v = true anomaly => actual angle between the orbiting body and periapsis
// Used to compute the position of the body
// No way to directly compute v from M so you need to:
// E = eccentric anomaly
//    M = E-e(sin)E      <= Keplers equation

// 3 Steps:

//    0) Prep:
//        Calculate time t in centuries from j2000
//        // month is zero-indexed, so 0 is January
//        let tMillisFromJ2000 = Date.now() - Date.UTC(2000, 0, 1, 12, 0, 0);
//        let tCenturiesFromJ2000 = tMillisFromJ2000 / (1000*60*60*24*365.25*100);
//        Reference point in time Jan 1 2000 (J2000 at noon) (for getting the plane of earth and sun as reference)

//        Calculate current values of each of the orbital params.
//        Semimajor axis of Earth from 1800-2500
//        a0 = 1.00000261; adot = 0.00000562
//        var a = a0 + adot * tCenturiesFromJ2000;

//    1) Keplers Equation:
//    2) Compute 2d position of the body
//    3) Rotate the 2d position into 3d coordinates
*/
/*BREAKING DOWN THE CODE FOUND IN NASA's CUSTOM ORBIT WEBAPP
  //https://ssd.jpl.nasa.gov/tools/orbit_diagram.html


  //Perihelion distance = var qr (?)
  //Eccentricity = var ecc
  //Inclination = var inc (in degrees)
  //Long. of ascending node (deg)  = var omega
  //Argument of perihelion (deg) = var raan
  //Time of perihelion passage = var tp

  // Derived:
  // var sma = perihelion distance / (1 - eccentricity);
  // var period = 2 * Math.PI * Math.sqrt(sma * sma * sma / gm )  => NOT SURE WHAT GM IS
  // n = Math.sqrt( gm/sma/sma/sma);  => I have n
  // vper = Math.sqrt(2*gm/Perihelion Distance -gm / sma) * au2km / day2sec  => Velocity at peri?
  // vapo = Math.sqrt(2*gm/(sma * (1 + ecc)) - gm/sma) * au2km / day2sec  => Velocity at peri?

  //constants
  // var rad2deg = 57.2957795130823;
  // var deg2rad = 1 / rad2deg;
  // var rmax = 55;
  // var gm = 0.00029591220828559;
  // var au2km = 149597870.7;
  // var km2au = 1 / au2km;
  // var day2sec = 86400;

  // function update_elements() {
  //   var qr = parseFloat($('#inp_qr').val());
  //   var ecc = parseFloat($('#inp_ecc').val());
  //   var inc = parseFloat($('#inp_inc').val());
  //   var raan = parseFloat($('#inp_raan').val());
  //   var omega = parseFloat($('#inp_omega').val());
  //   var tp = parseFloat($('#inp_tp').val());


  // // Derived variables:
  // var type;
  // var sma = qr / ( 1 - ecc );
  // var period = 2 * Math.PI * Math.sqrt( sma * sma * sma / gm );
  // var n = Math.sqrt( gm / sma / sma / sma );
  // var vper = Math.sqrt( 2 * gm / qr - gm / sma ) * au2km / day2sec;
  // var vapo = Math.sqrt( 2 * gm / (sma * (1 + ecc)) - gm / sma ) * au2km / day2sec;
  // sma = sma.toFixed(2);
  // period = period.toFixed(2);
  // n = n.toExponential(4);
  // vper = vper.toFixed(2);
  // vapo = vapo.toFixed(2);
  // if ( ecc == 0 ) {
  //   type = "Circular"; 
  // } else if ( ecc < 1 ) {
  //   type = "Elliptic";
  // } else if ( ecc == 1 ) {
  //   type = "Parabolic";
  //   sma = "Inf";
  //   period = "N/A";
  //   n = "N/A";
  //   vapo = "N/A";
  // } else if ( ecc > 1 ) {
  //   type = "Hyperbolic";
  //   period = "N/A";
  //   n = "N/A";
  //   vapo = "N/A";
  // }
  // var date = jd2cal(tp);
  // $("#orbit_class").html(type);
  // $("#orbital_period").html(period);
  // $("#mean_motion").html(n);
  // $("#peri_date").html(date.string);
  // $("#peri_vel").html(vper);
  // $("#apo_vel").html(vapo);
  // $("#semimajor_axis").html(sma);
  // return {};
  // };
*/
/*HELPFUL NOTES FROM ANOTHER ORBIT CALCULATING PROJECT ONLINE
// CODE FOUND AT: https://www.hackster.io/30506/calculation-of-right-ascension-and-declination-402218
//   X = r * [cos(o) * cos(v + p - o) - sin(o) * sin(v + p - o) *
//   cos(i)]
//   Y = r * [sin(o) * cos(v + p - o) + cos(o) * sin(v + p - o) *
//   cos(i)]
//   Z = r * [sin(v + p - o) * sin(i)]

//   r is radius vector
//   v is true anomaly
//   o is longitude of ascending node
//   p is longitude of perihelion
//   i is inclination of plane of orbit

//   the quantity v + p - o is the angle of the planet measured
//   in the plane of the orbit from the ascending node
*/



